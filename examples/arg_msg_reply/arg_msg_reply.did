service : {
  greet: (text) -> (text) query;
  requestAndResponse: (bool, nat, int, float32, text) -> (text) query;
  argBool: (bool) -> (bool) query;
  argInt: (int) -> (int) query;
  argNat: (nat) -> (nat) query;
  argFloat: (float32) -> (float32) query;
  argText: (text) -> (text) query;
  msgPrincipal: () -> (principal) query;
  responseEmpty: () -> () query;
  responseRecord: () -> (
    record{
      name : text;
      age : int;
      "principal" : principal;
    }
  ) query;
  testBlobEncoding: () -> (text) query;
  debugRecordStructure: () -> (text) query;
  responseTEcdsaPublicKeyArgs: () -> (
    record {
      canister_id : opt principal;
      derivation_path : vec blob;
      key_id : record { 
        curve : variant { secp256k1; secp256r1 }; 
        name : text 
      };
    }
  ) query;
}
