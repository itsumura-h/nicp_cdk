service : {
  nullResponse: () -> () query;
  boolArg: (bool) -> (bool) query;
  intArg: (int) -> (int) query;
  int8Arg: (int8) -> (int8) query;
  int16Arg: (int16) -> (int16) query;
  int32Arg: (int32) -> (int32) query;
  int64Arg: (int64) -> (int64) query;
  natArg: (nat) -> (nat) query;
  nat8Arg: (nat8) -> (nat8) query;
  nat16Arg: (nat16) -> (nat16) query;
  nat32Arg: (nat32) -> (nat32) query;
  nat64Arg: (nat64) -> (nat64) query;
  floatArg: (float32) -> (float32) query;
  float32Arg: (float32) -> (float32) query;
  float64Arg: (float64) -> (float64) query;
  textArg: (text) -> (text) query;
  blobArg: (blob) -> (blob) query;
  optArg: (opt nat8) -> (opt nat8) query;
  vecArg: (vec nat16) -> (vec nat16) query;
  variantArg: (variant { success : text; error : text; value : nat }) -> (variant { success : text; error : text; value : nat }) query;
  funcArg: (func () -> ()) -> (func () -> ()) query;
  recordArg: (
    record {
      name: text;
      age: nat;
      isActive: bool;
    }
  ) -> (
    record {
      name: text;
      age: nat;
      isActive: bool;
    }
  ) query;

  // // Phase 3.1: Enum機能のCanister関数定義
  // argSimpleStatus: (variant { Active; Inactive }) -> (variant { Active; Inactive }) query;
  // responseSimpleStatus: () -> (variant { Active; Inactive }) query;
  // argPriority: (variant { Low; Medium; High; Critical }) -> (variant { Low; Medium; High; Critical }) query;
  // responsePriority: () -> (variant { Low; Medium; High; Critical }) query;
  
  // // Phase 3.1: Record内Enum値のCanister関数定義
  // argRecordWithEnum: (variant { success : text; error : text; value : nat }) -> (variant { success : text; error : text; value : nat }) query;
  // responseRecordWithEnum: () -> (text) query;

  // responsePrincipal: () -> (principal) query;
  // responseBlob: () -> (blob) query;
  // responseOpt: () -> (opt nat8) query;
  // responseVec: () -> (vec nat16) query;
  // responseVariant: () -> (variant { success : text }) query;
  // responseEmpty: () -> () query;
  // responseNull: () -> (null) query;
  // responseRecord: () -> (
  //   record{
  //     name : text;
  //     age : int;
  //     isActive: bool;
  //   }
  // ) query;

  // responseNestedRecord: () -> (
  //   record {
  //     name : text;
  //     age : int;
  //     isActive : bool;
  //   }
  // ) query;
}
