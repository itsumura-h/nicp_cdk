service : {
  greet: (text) -> (text) query;
  requestAndResponse: (bool, nat, int, float32, text) -> (text) query;
  argBool: (bool) -> (bool) query;
  argInt: (int) -> (int) query;
  argNat: (nat) -> (nat) query;
  argNat8: (nat8) -> (nat8) query;
  argNat16: (nat16) -> (nat16) query;
  argNat32: (nat32) -> (nat32) query;
  argNat64: (nat64) -> (nat64) query;
  argInt8: (int8) -> (int8) query;
  argInt16: (int16) -> (int16) query;
  argInt32: (int32) -> (int32) query;
  argInt64: (int64) -> (int64) query;
  argFloat: (float32) -> (float32) query;
  argFloat32: (float32) -> (float32) query;
  argFloat64: (float64) -> (float64) query;
  argText: (text) -> (text) query;
  argPrincipal: () -> (principal) query;
  argBlob: (blob) -> (blob) query;
  argOpt: (opt nat8) -> (opt nat8) query;
  argVec: (vec nat16) -> (vec nat16) query;
  argVariant: (variant { success : text; error : text; value : nat }) -> (variant { success : text; error : text; value : nat }) query;
  argEcdsaCurve: (variant { secp256k1; secp256r1 }) -> (variant { secp256k1; secp256r1 }) query;
  responseEcdsaPublicKeyArgs: () -> (
    record {
      canister_id : principal;
      derivation_path : text;
      curve : text;
      key_name : text;
    }
  ) query;
  argFunc: (func () -> ()) -> (func () -> ()) query;

  // Phase 3.1: Enum機能のCanister関数定義
  argSimpleStatus: (variant { Active; Inactive }) -> (variant { Active; Inactive }) query;
  responseSimpleStatus: () -> (variant { Active; Inactive }) query;
  argPriority: (variant { Low; Medium; High; Critical }) -> (variant { Low; Medium; High; Critical }) query;
  responsePriority: () -> (variant { Low; Medium; High; Critical }) query;
  argEcdsaCurveEnum: (variant { secp256k1; secp256r1 }) -> (variant { secp256k1; secp256r1 }) query;
  responseEcdsaCurveEnum: () -> (variant { secp256k1; secp256r1 }) query;
  
  // Phase 3.1: Record内Enum値のCanister関数定義
  argRecordWithEnum: (
    record {
      status : variant { Active; Inactive };
      priority : variant { Low; Medium; High; Critical };
      curve : variant { secp256k1; secp256r1 };
    }
  ) -> (
    record {
      status : variant { Active; Inactive };
      priority : variant { Low; Medium; High; Critical };
      curve : variant { secp256k1; secp256r1 };
    }
  ) query;
  
  responseRecordWithEnum: () -> (
    record {
      id : int;
      name : text;
      status : variant { Active; Inactive };
      priority : variant { Low; Medium; High; Critical };
      curve : variant { secp256k1; secp256r1 };
      timestamp : text;
    }
  ) query;
  
  // Phase 3.1: Management Canister ECDSA連携テスト用関数定義
  argEcdsaPublicKeyArgsEnum: (
    record {
      canister_id : opt principal;
      derivation_path : vec blob;
      key_id : record {
        curve : variant { secp256k1; secp256r1 };
        name : text;
      };
    }
  ) -> (
    record {
      canister_id : opt principal;
      derivation_path : vec blob;
      key_id : record {
        curve : variant { secp256k1; secp256r1 };
        name : text;
      };
    }
  ) query;
  
  responseEcdsaPublicKeyArgsEnum: () -> (
    record {
      canister_id : opt principal;
      derivation_path : vec blob;
      key_id : record {
        curve : variant { secp256k1; secp256r1 };
        name : text;
      };
    }
  ) query;

  msgPrincipal: () -> (principal) query;
  responseBlob: () -> (blob) query;
  responseOpt: () -> (opt nat8) query;
  responseVec: () -> (vec nat16) query;
  responseVariant: () -> (variant { success : text }) query;
  responseFunc: () -> (func () -> ()) query;
  responseEmpty: () -> () query;
  responseNull: () -> (null) query;
  responseRecord: () -> (
    record{
      name : text;
      age : int;
      "principal" : principal;
    }
  ) query;

  responseNestedRecord: () -> (
    record {
      name : text;
      age : int;
      isActive : bool;
    }
  ) query;
  responseDeepNestedRecord: () -> (
    record {
      organization : record {
        name : text;
        departments : record {
          engineering : record {
            name : text;
            team : record {
              frontend : record {
                name : text;
                members : int;
              };
              backend : record {
                name : text;
                members : int;
              };
            };
          };
        };
      };
    }
  ) query;
  responseComplexNestedRecord: () -> (
    record {
      application : record {
        info : record {
          name : text;
          version : text;
          settings : record {
            database : record {
              host : text;
              port : int;
              ssl : bool;
            };
            cache : record {
              enabled : bool;
              ttl : int;
              servers : vec text;
            };
          };
        };
        users : record {
          permissions : record {
            admin : vec principal;
          };
        };
        files : record {
          config : blob;
        };
      };
    }
  ) query;
}
